{"version":3,"sources":["services/utilService.js","cmps/RecentSearches.jsx","cmps/AppFilter.jsx","cmps/MediaPlayer.jsx","cmps/TrackPreview.jsx","cmps/TrackList.jsx","cmps/LongTxt.jsx","cmps/TrackDetails.jsx","services/mediaService.js","pages/Home.jsx","cmps/AppHeader.jsx","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["utilService","getRandomInt","min","max","Math","ceil","floor","random","millisToMinsSecs","millis","mins","secs","toFixed","makeId","length","txt","possible","i","charAt","saveToStorage","key","val","str","JSON","stringify","localStorage","setItem","loadFromStorage","getItem","parse","removeFromStorage","removeItem","RecentSearches","recentSearches","handleChange","onClearSearches","className","map","searchItem","onClick","ev","AppFilter","onSetFilter","useState","filterTxt","setFilterTxt","showRecents","toggleShowRecents","STORAGE_KEY","go","console","log","target","value","onFilter","preventDefault","pop","unshift","onSubmit","type","name","onChange","autoComplete","onFocus","onBlur","setTimeout","MediaPlayer","track","dockMode","process","PUBLIC_URL","REACT_APP_CLIENT_ID","svgBaseUrl","audioUrl","useRef","trackExists","Object","keys","isPlaying","togglePlaying","useEffect","a","onStopAudio","current","Audio","stream_url","play","pause","currentTime","to","alt","src","artwork_url","title","user","username","TrackPreview","onSelectTrack","gridView","duration","favoritings_count","TrackList","tracks","onNextPage","viewModeFromStorage","toggleGridView","onToggleGridView","isListView","id","LongTxt","text","desc","isLongTxtShown","toggleLongTextShown","substring","TrackDetails","description","avatar_url","href","rel","mediaService","query","nextPage","fetch","res","json","url","Home","setTrack","lastQuery","currQuery","nextPageUrl","searchSettings","setSearchSetting","next_href","collection","selectedTrack","AppHeader","navbar","setNavbar","window","addEventListener","scrollY","location","reload","stroke","fill","strokeWidth","viewBox","strokeLinecap","strokeLinejoin","height","width","d","App","path","component","Boolean","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.952ba7f3.chunk.js","sourcesContent":["export const utilService = {\r\n    getRandomInt,\r\n    millisToMinsSecs,\r\n    makeId,\r\n    saveToStorage,\r\n    loadFromStorage,\r\n    removeFromStorage\r\n}\r\n\r\nfunction getRandomInt(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\r\n}\r\n\r\nfunction millisToMinsSecs(millis) {\r\n    var mins = Math.floor(millis / 60000)\r\n    var secs = ((millis % 60000) / 1000).toFixed(0)\r\n    return mins + \":\" + (secs < 10 ? '0' : '') + secs\r\n}\r\n\r\nfunction makeId(length = 5) {\r\n    var txt = '';\r\n    var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n    for (var i = 0; i < length; i++) {\r\n        txt += possible.charAt(Math.floor(Math.random() * possible.length));\r\n    }\r\n    return txt;\r\n}\r\n\r\nfunction saveToStorage(key, val) {\r\n    const str = JSON.stringify(val)\r\n    localStorage.setItem(key, str)\r\n}\r\nfunction loadFromStorage(key) {\r\n    const str = localStorage.getItem(key)\r\n    return JSON.parse(str)\r\n}\r\nfunction removeFromStorage(key) {\r\n    localStorage.removeItem(key)\r\n}","import { utilService } from '../services/utilService'\r\n\r\nexport const RecentSearches = ({ recentSearches, handleChange, onClearSearches }) => {\r\n\r\n    return <div className=\"recent-searches\">\r\n        {recentSearches.map(searchItem => {\r\n            return <button className=\"btn-search-item\"\r\n                key={utilService.makeId()} onClick={ev => handleChange(ev, searchItem, true)}>\r\n                <span>{searchItem}</span>\r\n            </button>\r\n        })}\r\n        <button className=\"btn-clear\" onClick={onClearSearches}>CLEAR</button>\r\n    </div>\r\n}","import { useState } from \"react\"\r\nimport { RecentSearches } from \"./RecentSearches\"\r\nimport { utilService } from '../services/utilService'\r\n\r\nexport const AppFilter = ({ onSetFilter }) => {\r\n\r\n    const [filterTxt, setFilterTxt] = useState('')\r\n    const [showRecents, toggleShowRecents] = useState(false)\r\n    const STORAGE_KEY = 'SEARCHES'\r\n    let recentSearches = utilService.loadFromStorage(STORAGE_KEY) || []\r\n\r\n    const handleChange = (ev, txt, go = false) => {\r\n        console.log(ev, txt, go)\r\n        setFilterTxt(txt || ev.target.value)\r\n        if (go) onFilter(ev)\r\n    }\r\n\r\n    const handleStorage = () => {\r\n        if (recentSearches.length >= 5) recentSearches.pop()\r\n        recentSearches.unshift(filterTxt)\r\n        utilService.saveToStorage(STORAGE_KEY, recentSearches)\r\n    }\r\n\r\n    const onClearSearches = () =>\r\n        utilService.removeFromStorage(STORAGE_KEY)\r\n\r\n    const onFilter = ev => {\r\n        ev.preventDefault()\r\n        if (filterTxt) handleStorage()\r\n        onSetFilter(filterTxt)\r\n        toggleShowRecents(false)\r\n    }\r\n\r\n    return <form className=\"app-filter flex a-center\" onSubmit={onFilter}>\r\n        <input type=\"text\" name=\"filter-input\" value={filterTxt} onChange={handleChange} autoComplete=\"off\"\r\n            onFocus={() => toggleShowRecents(true)} onBlur={() => setTimeout(() => toggleShowRecents(false), 100)} />\r\n        {recentSearches.length && showRecents ? <RecentSearches recentSearches={recentSearches}\r\n            handleChange={handleChange} onClearSearches={onClearSearches} /> : null}\r\n        <button type=\"submit\" className={filterTxt ? '' : 'inactive'}>Find</button>\r\n    </form>\r\n}","import { useEffect, useRef, useState } from \"react\"\r\nimport { Link } from \"react-router-dom\"\r\n\r\nexport const MediaPlayer = ({ track, dockMode }) => {\r\n\r\n    const { PUBLIC_URL, REACT_APP_CLIENT_ID } = process.env\r\n    const svgBaseUrl = `${PUBLIC_URL}/assets/imgs`\r\n    let audioUrl = useRef()\r\n    const trackExists = track && Object.keys(track).length\r\n    const [isPlaying, togglePlaying] = useState(false)\r\n    console.log(track)\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            trackExists && onStopAudio()\r\n            audioUrl.current = new Audio(`${track.stream_url}?consumer_key=${REACT_APP_CLIENT_ID}`)\r\n            await audioUrl.current.play()\r\n            togglePlaying(true)\r\n        })()\r\n    }, [track.stream_url])\r\n\r\n    const onTogglePlay = () => {\r\n        isPlaying ? audioUrl.current.pause() : audioUrl.current.play()\r\n        trackExists && togglePlaying(!isPlaying)\r\n    }\r\n\r\n    const onStopAudio = () => {\r\n        audioUrl.current.pause()\r\n        audioUrl.current.currentTime = 0\r\n        togglePlaying(false)\r\n    }\r\n\r\n    const onNextTrack = () => {\r\n\r\n    }\r\n    const onPrevTrack = () => {\r\n\r\n    }\r\n\r\n    return <article className={`media-player ${dockMode ? 'dock-mode' : ''}`}>\r\n        <div className=\"main-layout flex j-between a-center\">\r\n            <div className=\"flex grow a-center\">\r\n                {<Link to='/player' />}\r\n                <img className=\"media-img\" alt=\"\"\r\n                    src={track.artwork_url || `${svgBaseUrl}/track-img-fallback.svg`} />\r\n                {trackExists ? <div className=\"flex col\">\r\n                    <label>{track.title}</label>\r\n                    <small><span className=\"muted\">by&nbsp;</span>{track.user.username}</small>\r\n                </div> : null}\r\n            </div>\r\n            <div className=\"btn-container flex\">\r\n                <button onClick={onPrevTrack}>\r\n                    <img src={`${svgBaseUrl}/btn-prev.png`} alt=\"\" />\r\n                </button>\r\n                <button className={isPlaying ? 'btn-pause' : 'btn-play'} onClick={onTogglePlay}>\r\n                    <img src={`${svgBaseUrl}/${isPlaying ? 'btn-pause' : 'btn-play'}.png`} alt=\"\" />\r\n                </button>\r\n                <button onClick={onNextTrack}>\r\n                    <img src={`${svgBaseUrl}/btn-next.png`} alt=\"\" />\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </article>\r\n}","import { utilService } from '../services/utilService'\r\n\r\nexport const TrackPreview = ({ track, onSelectTrack, gridView }) => {\r\n\r\n    const svgBaseUrl = `${process.env.PUBLIC_URL}/assets/imgs`\r\n\r\n    return <article className={`track-preview pointer ${gridView ? 'grid-view' : 'list-view'}`}\r\n        onClick={() => onSelectTrack(track)}>\r\n        <img src={track.artwork_url || `${svgBaseUrl}/track-img-fallback.svg`} alt=\"\" />\r\n        <div className=\"flex col\">\r\n            <small>{track.user.username}</small>\r\n            <label>{track.title}</label>\r\n            <div className=\"flex a-self-end\">\r\n                <div className=\"flex a-center\">\r\n                    <img className=\"clock-img\" src={`${svgBaseUrl}/clock.png`} alt=\"\" />\r\n                    <span>{utilService.millisToMinsSecs(track.duration)}</span>\r\n                </div>\r\n                <div className=\"flex a-center\">\r\n                    <img className=\"fav-img\" src={`${svgBaseUrl}/favorite.png`} alt=\"\" />\r\n                    <span>{track.favoritings_count}</span>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </article>\r\n}","import { useState } from 'react'\r\nimport { TrackPreview } from './TrackPreview'\r\nimport { utilService } from '../services/utilService'\r\n\r\nexport const TrackList = ({ tracks, onSelectTrack, onNextPage }) => {\r\n\r\n    const STORAGE_KEY = 'IS_GRID_MODE'\r\n    const svgBaseUrl = `${process.env.PUBLIC_URL}/assets/imgs`\r\n    const viewModeFromStorage = utilService.loadFromStorage(STORAGE_KEY)\r\n    const [gridView, toggleGridView] = useState(viewModeFromStorage || false)\r\n\r\n    const onToggleGridView = isListView => {\r\n        toggleGridView(isListView)\r\n        utilService.saveToStorage(STORAGE_KEY, isListView)\r\n    }\r\n\r\n    if (!tracks.length) return <div></div>\r\n    return <section className=\"track-list-container\">\r\n        <div className={`track-list ${gridView ? 'grid-view' : 'list-view'}`}>\r\n            {tracks.map(track => {\r\n                return <TrackPreview key={track.id} gridView={gridView}\r\n                    track={track} onSelectTrack={onSelectTrack} />\r\n            })}\r\n        </div>\r\n        <div className=\"btns-container flex grow\">\r\n            <button className=\"btn-grid\" onClick={() => onToggleGridView(true)}>\r\n                <img src={`${svgBaseUrl}/grid.svg`} alt=\"grid\" />\r\n            </button>\r\n            <button className=\"btn-list\" onClick={() => onToggleGridView(false)}>\r\n                <img src={`${svgBaseUrl}/list.svg`} alt=\"list\" />\r\n            </button>\r\n            <button className=\"btn-next\" onClick={onNextPage}>Next</button>\r\n        </div>\r\n    </section>\r\n}","import { useState } from \"react\"\r\n\r\nexport function LongTxt({ text }) {\r\n\r\n    let desc = ''\r\n    const [isLongTxtShown, toggleLongTextShown] = useState(false)\r\n\r\n    if (isLongTxtShown) desc = text\r\n    else desc = text.substring(0, 150)\r\n\r\n    return <div className={`fs14 ${desc.length >= 150 ? 'pointer' : ''}`}\r\n        onClick={() => toggleLongTextShown(!isLongTxtShown)}>\r\n        <p className=\"d-inline\">{desc}</p>\r\n        {desc.length >= 150 &&\r\n            <span className=\"clr1\">{isLongTxtShown ? ' ▲' : '... ▼'}</span>}\r\n    </div>\r\n}","import { LongTxt } from \"./LongTxt\"\r\nimport { utilService } from '../services/utilService'\r\n\r\nexport const TrackDetails = ({ track }) => {\r\n\r\n    console.log(track)\r\n    const svgBaseUrl = `${process.env.PUBLIC_URL}/assets/imgs`\r\n\r\n    return <section className=\"track-details flex col\">\r\n        <div className=\"track-panel flex\">\r\n            <img src={track.artwork_url} alt=\"\" />\r\n            <div className=\"flex col\">\r\n                <header className=\"flex col\">\r\n                    <label>{track.title}</label>\r\n                </header>\r\n                <main className=\"grow\">\r\n                    {track.description ? <LongTxt text={track.description} />\r\n                        : <span className=\"muted\">No description given...</span>}\r\n                </main>\r\n                <footer className=\"flex a-center\">\r\n                    <div className=\"flex a-center\">\r\n                        <img className=\"clock-img\" src={`${svgBaseUrl}/clock.png`} alt=\"\" />\r\n                        <span>{utilService.millisToMinsSecs(track.duration)}</span>\r\n                    </div>\r\n                    <div className=\"flex a-center\">\r\n                        <img className=\"fav-img\" src={`${svgBaseUrl}/favorite.png`} alt=\"\" />\r\n                        <span>{track.favoritings_count}</span>\r\n                    </div>\r\n                </footer>\r\n            </div>\r\n        </div>\r\n        <div className=\"user-panel flex col\">\r\n            <h4>Artist</h4>\r\n            <div className=\"flex\">\r\n                <img src={track.user.avatar_url} alt=\"\" />\r\n                <div className=\"flex col\">\r\n                    <small className=\"grow\">{track.user.username}</small>\r\n                    <a href=\"https://soundcloud.com/octobersveryown\" target=\"_blank\" rel=\"noreferrer\">\r\n                        <button>Visit</button>\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </section >\r\n}","export const mediaService = {\r\n  query,\r\n  nextPage\r\n}\r\n\r\nasync function query(filterTxt = '') {\r\n  const res = await fetch(\r\n    `https://api.soundcloud.com/tracks?format=json&linked_partitioning=1\r\n    &client_id=${process.env.REACT_APP_CLIENT_ID}&q=${filterTxt}&limit=6`)\r\n  return res.json()\r\n}\r\n\r\nasync function nextPage(url) {\r\n  const res = await fetch(url)\r\n  return res.json()\r\n}","import { useEffect, useState } from \"react\"\r\nimport { AppFilter } from \"../cmps/AppFilter\"\r\nimport { MediaPlayer } from \"../cmps/MediaPlayer\"\r\nimport { TrackList } from \"../cmps/TrackList\"\r\nimport { TrackDetails } from \"../cmps/TrackDetails\"\r\nimport { mediaService } from '../services/mediaService'\r\n\r\nexport const Home = () => {\r\n\r\n    const [track, setTrack] = useState({})\r\n    const [searchSettings, setSearchSetting] = useState({\r\n        lastQuery: '',\r\n        currQuery: '',\r\n        nextPageUrl: '',\r\n        tracks: []\r\n    })\r\n\r\n    useEffect(() => {\r\n        (async () => {\r\n            const query = await mediaService.query('mob')\r\n            setSearchSetting({\r\n                ...searchSettings,\r\n                nextPageUrl: query.next_href,\r\n                tracks: query.collection\r\n            })\r\n        })()\r\n    }, [])\r\n\r\n    const onSetFilter = async filterTxt => {\r\n        const query = await mediaService.query(filterTxt)\r\n        setSearchSetting({\r\n            lastQuery: filterTxt ? filterTxt : searchSettings.lastQuery,\r\n            currQuery: filterTxt,\r\n            nextPageUrl: query.next_href,\r\n            tracks: filterTxt ? query.collection : []\r\n        })\r\n    }\r\n\r\n    const onSelectTrack = selectedTrack => {\r\n        setTrack(selectedTrack)\r\n        onSetFilter('')\r\n    }\r\n\r\n    const onNextPage = async () => {\r\n        const query = await mediaService.nextPage(searchSettings.nextPageUrl)\r\n        setSearchSetting({\r\n            ...searchSettings,\r\n            nextPageUrl: query.next_href,\r\n            tracks: query.collection\r\n        })\r\n    }\r\n\r\n    return <section className=\"home\">\r\n        <nav className=\"result-bar\">\r\n            <div className=\"main-layout flex col\">\r\n                <small>{searchSettings.currQuery ? 'Search Results /' : 'Spotlight'}</small>\r\n                <label>{searchSettings.currQuery ? searchSettings.currQuery : 'Featured Tracks'}</label>\r\n            </div>\r\n        </nav>\r\n        <div className=\"main-layout pos-relative\">\r\n            <AppFilter onSetFilter={onSetFilter} />\r\n            {Object.keys(track).length ? <TrackDetails track={track} />\r\n                : <TrackList tracks={searchSettings.tracks} onSelectTrack={onSelectTrack} onNextPage={onNextPage} />}\r\n        </div>\r\n        <MediaPlayer track={track} />\r\n    </section>\r\n}","import { useState } from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nexport const AppHeader = () => {\r\n\r\n    const [navbar, setNavbar] = useState(false)\r\n    const changeBackground = () =>\r\n        window.scrollY >= 75 ? setNavbar(true) : setNavbar(false)\r\n    window.addEventListener('scroll', changeBackground)\r\n\r\n    return <header className={navbar ? \"app-header active\" : \"app-header\"}>\r\n        <section className=\"main-layout flex j-between a-center\">\r\n            <div className=\"logo\" onClick={()=>window.location.reload()}>\r\n                <NavLink to=\"/\">LOUDER</NavLink>\r\n                </div>\r\n            <nav className=\"flex a-center\">\r\n                <a href=\"https://github.com/tomleb3/beatit\">\r\n                    <svg stroke=\"currentColor\" fill=\"none\" strokeWidth=\"2\" viewBox=\"0 0 24 24\" strokeLinecap=\"round\"\r\n                        strokeLinejoin=\"round\" className=\"github-link\" height=\"1.5em\" width=\"1.5em\">\r\n                        <path d=\"M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0 0-.94-2.61c3.14-.35\r\n                         6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07 5.07 0 0 0 19.91 1S18.73.65\r\n                          16 2.48a13.38 13.38 0 0 0-7 0C6.27.65 5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44\r\n                           5.44 0 0 0-1.5 3.78c0 5.42 3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22\"></path>\r\n                    </svg>\r\n                </a>\r\n            </nav>\r\n        </section>\r\n    </header>\r\n}","import { Switch, Route } from 'react-router-dom'\nimport { Home } from './pages/Home.jsx'\nimport { AppHeader } from './cmps/AppHeader.jsx'\nimport { MediaPlayer } from './cmps/MediaPlayer.jsx';\n\nexport function App() {\n  return (\n    <main className=\"App\">\n      <AppHeader />\n      <Switch>\n        <Route path=\"/player\" component={MediaPlayer} />\n        <Route path=\"/\" component={Home} />\n      </Switch>\n    </main>\n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport { HashRouter as Router } from 'react-router-dom'\nimport './styles/global.scss'\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}